### Отчет по лабораторной 2 "Информация об изображениях"

#### 1. **Введение**

Проект представляет собой приложение для извлечения и отображения информации о различных изображениях, находящихся в выбранной пользователем папке. Программа анализирует изображения поддерживаемых форматов (JPEG, PNG, GIF, BMP, TIFF и других) и выводит информацию о размере изображения, глубине цвета и типе сжатия. Приложение также поддерживает асинхронную обработку изображений, что ускоряет обработку больших коллекций файлов.

#### 2. **Цели и задачи проекта**

**Цель проекта**:
Создание приложения, которое позволяет пользователю быстро получить информацию о файлах изображений, находящихся в заданной папке, с возможностью обработки большого количества файлов с использованием многозадачности.

**Задачи проекта**:
1. Реализация функционала для извлечения информации о различных изображениях (формат, размеры, глубина цвета, тип сжатия).
2. Разработка графического интерфейса с использованием библиотеки **Tkinter** для удобного взаимодействия с пользователем.
3. Реализация асинхронной обработки изображений для ускорения работы с большим количеством файлов.
4. Логирование ошибок и предупреждений при обработке файлов.
5. Обеспечение простоты использования через интуитивно понятный интерфейс.

#### 3. **Реализованный функционал**

1. **Обработка изображений**:
   - Программа поддерживает несколько популярных форматов изображений: **JPEG**, **PNG**, **GIF**, **BMP**, **TIFF** и другие.
   - Для каждого изображения извлекается следующая информация:
     - **Имя файла**.
     - **Размер** изображения в пикселях (ширина x высота).
     - **Глубина цвета** (например, RGB, CMYK).
     - **Тип сжатия** (например, Lossy, Deflate, LZW и т.д.).

2. **Асинхронная обработка файлов**:
   - Для повышения производительности при обработке большого количества файлов используется **многозадачность** с помощью **ThreadPoolExecutor** из библиотеки **concurrent.futures**. Это позволяет выполнять обработку файлов параллельно и ускоряет работу программы.

3. **Графический интерфейс**:
   - Интерфейс разработан с использованием библиотеки **Tkinter**. В нем есть кнопка для выбора папки с изображениями и таблица для отображения информации о файлах.
   - Таблица создана с использованием виджета **Treeview** из модуля **ttk**, который позволяет выводить информацию в виде таблицы с заголовками.

4. **Логирование**:
   - Весь процесс обработки изображений логируется с использованием модуля **logging**. Логируется информация о том, какие файлы были обработаны, а также предупреждения и ошибки при обработке файлов.

#### 4. **Описание архитектуры и технологий**

- **Язык программирования**: Python 3.x.
- **Библиотеки**:
  - **Tkinter**: для создания графического интерфейса.
  - **Pillow**: для работы с изображениями.
  - **concurrent.futures**: для многозадачности и асинхронной обработки файлов.
  - **logging**: для логирования операций и ошибок.

- **Многозадачность**:
  Для обработки изображений используется **ThreadPoolExecutor**, который позволяет обрабатывать файлы в многозадачном режиме. Это уменьшает время обработки, так как файлы обрабатываются параллельно.

#### 5. **Процесс работы программы**

1. **Запуск программы**:
   При запуске приложения пользователю предлагается выбрать папку с изображениями.
   
2. **Выбор папки**:
   Для выбора папки используется стандартное диалоговое окно с помощью **filedialog.askdirectory()**.

3. **Обработка файлов**:
   После выбора папки программа сканирует ее на наличие файлов с расширениями, поддерживаемыми для обработки (JPEG, PNG, GIF, BMP, TIFF и др.). Для каждого файла извлекается информация о размере, глубине цвета и типе сжатия.

4. **Отображение результатов**:
   Полученные данные отображаются в таблице в главном окне. Также в журнал логирования добавляется информация о процессе обработки, включая ошибки, если они возникли.

5. **Асинхронная обработка**:
   Для ускорения работы с большим количеством изображений используется многозадачность. Каждый файл обрабатывается в отдельном потоке, что позволяет параллельно анализировать несколько файлов.

#### 6. **Обработка ошибок**

Программа проверяет корректность каждого файла перед его обработкой. Если файл не может быть открыт или обработан, в таблице отображается сообщение об ошибке. Все ошибки и исключения также логируются в файл **image_processing.log**, что позволяет отслеживать возникшие проблемы.

Пример обработки ошибок:
- Невозможность открыть файл изображения.
- Ошибки формата данных (например, если файл не является изображением).
- Ошибки при чтении или записи в лог.

#### 7. **Рекомендации по улучшению**

- **Поддержка других форматов**:
  Возможно добавление поддержки других форматов изображений, таких как **WEBP**, **HEIF** и других.
  
- **Фильтрация по меткам**:
  Можно добавить возможность фильтрации изображений по меткам или атрибутам, таким как дата создания, размер файла или тип сжатия.

- **Интерфейс для экспорта данных**:
  Реализовать возможность экспорта информации о файлах в формате CSV или JSON для дальнейшей работы с данными.

- **Поддержка обработки подкаталогов**:
  Реализовать поддержку обхода подкаталогов для обработки изображений в подкаталогах выбранной папки.

#### 8. **Заключение**

Программа **Информация об изображениях** представляет собой полезный инструмент для анализа изображений и получения информации о их характеристиках. Она обеспечивает быструю и удобную обработку изображений, поддерживает работу с множеством популярных форматов и использует многозадачность для ускорения процесса. Логирование позволяет отслеживать работу программы и диагностировать возможные ошибки.

Этот инструмент может быть полезен для профессионалов, работающих с большими коллекциями изображений, а также для людей, которым нужно быстро узнать информацию о файлах изображений.
