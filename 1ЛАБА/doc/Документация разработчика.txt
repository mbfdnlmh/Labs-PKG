Документация разработчика для лабораторной 1 "Конвертер цветовых моделей"
1. Введение

Этот проект представляет собой приложение для конвертации цветов между тремя основными цветовыми моделями: RGB, XYZ и CMYK. Приложение предоставляет пользователю возможность преобразовывать цвет в различные форматы, а также визуализировать его через графический интерфейс, предоставленный фреймворком Qt.
2. Обзор архитектуры

Проект использует паттерн проектирования MVC (Model-View-Controller), где:

    Модель (Model): Алгоритмы преобразования между цветовыми моделями.
    Представление (View): Графический интерфейс (Qt Widgets), который отображает элементы управления (текстовые поля, ползунки, кнопки).
    Контроллер (Controller): Логика, которая связывает пользовательские действия с обновлением данных и интерфейса.

Приложение делится на два основных модуля:

    Конвертация цветов — алгоритмы для преобразования значений между моделями RGB, XYZ и CMYK.
    Графический интерфейс — элементы интерфейса, реализующие взаимодействие с пользователем (текстовые поля, ползунки, кнопки и т.д.).

3. Структура проекта

src/
│
├── colorconverterapp.h       # Заголовочный файл для основного класса приложения
├── colorconverterapp.cpp     # Реализация методов основного класса приложения
├── main.cpp                  # Главная функция для запуска приложения
├── algorithms/               # Папка с алгоритмами конвертации
│   ├── rgb_to_xyz.cpp        # Алгоритм конвертации RGB в XYZ
│   ├── rgb_to_cmyk.cpp       # Алгоритм конвертации RGB в CMYK
│   └── cmyk_to_rgb.cpp       # Алгоритм конвертации CMYK в RGB
└── resources/                # Ресурсы (например, изображения, иконки и т.д.)

4. Описание классов и методов
Класс ColorConverterApp

    Конструктор:

ColorConverterApp(QWidget *parent = nullptr);

Инициализирует интерфейс и все необходимые элементы управления (текстовые поля, ползунки и кнопки).

Методы обработки изменений:

    onRGBChanged(): Обрабатывает изменения в текстовых полях RGB, конвертирует в XYZ и CMYK, обновляет интерфейс.
    onXYZChanged(): Обрабатывает изменения в текстовых полях XYZ, конвертирует в RGB и CMYK, обновляет интерфейс.
    onCMYKChanged(): Обрабатывает изменения в текстовых полях CMYK, конвертирует в RGB и XYZ, обновляет интерфейс.
    onSliderChanged(): Обрабатывает изменения ползунков и обновляет соответствующие текстовые поля и другие элементы.

Методы конвертации:

    QVector<double> convertRGBToXYZ(int r, int g, int b);
    QVector<int> convertXYZToRGB(double x, double y, double z);
    QVector<double> convertRGBToCMYK(int r, int g, int b);
    QVector<int> convertCMYKToRGB(double c, double m, double yC, double k);

    Алгоритмы преобразования цветов между моделями RGB, XYZ и CMYK.

    Методы обновления:
        updateBackgroundColor(QColor color): Обновляет цвет фона окна.
        updateSlidersFromRGB(int r, int g, int b): Обновляет ползунки для RGB.
        updateSlidersFromXYZ(double x, double y, double z): Обновляет ползунки для XYZ.
        updateSlidersFromCMYK(double c, double m, double yC, double k): Обновляет ползунки для CMYK.

5. Работа с ползунками и текстовыми полями

Каждый ползунок (QSlider) связан с текстовыми полями (QLineEdit), которые показывают значения цвета в формате RGB, XYZ или CMYK. Изменение значения одного элемента автоматически обновляет другие. Важно, чтобы обновления интерфейса происходили в одном направлении, чтобы избежать бесконечных циклов обновлений.
6. Ошибка обработки значений

Методы checkAndAlertRGB(), checkAndAlertXYZ() и checkAndAlertCMYK() проверяют введенные значения и выводят предупреждения, если они выходят за допустимые пределы.
7. Рекомендации по улучшению

    Расширить функциональность для работы с дополнительными цветовыми моделями, например HSL или Lab.
    Реализовать возможность сохранения и загрузки цветов в формате JSON или XML.
    Добавить возможность визуализации цвета в реальном времени, например, с помощью градиентного фона.


